// Code generated by tygo. DO NOT EDIT.

//////////
// source: about.go

export const TypeAbout = "about" as const;
export interface About extends Partial<component> {
  /**
   * ID is ID.
   */
  id: string;
  /**
   * Description is description to display.
   */
  description?: Text;
  /**
   * AboutFields
   */
  about_fields?: AboutField[];
}

//////////
// source: about_field.go

export const TypeAboutField = "about-field" as const;
export interface AboutField extends component {
  /**
   * Label is label to display.
   */
  label?: Text;
  /**
   * Value is value to display.
   * It can be Text or Picture Component.
   */
  value?: any;
}

//////////
// source: account.go

export const TypeAccount = "account" as const;
export interface Account extends Partial<component> {
  /**
   * ID is ID.
   */
  id: string;
  title?: Text;
  home_network?: HomeNetwork;
  footer?: Text;
  buttons?: Button[];
  user_info?: UserInfo[];
}

//////////
// source: action_item.go

export const TypeActionItem = "action-item" as const;
export interface ActionItem extends Partial<component> {
  text?: Text;
  icon?: Picture;
  icon_focused?: Picture;
  /**
   * ID is ID.
   */
  id?: string;
  slug?: string;
  is_minimized: boolean;
  show_caret: boolean;
}

//////////
// source: action_item_group.go

export const TypeActionItemGroup = "action-item-group" as const;
export interface ActionItemGroup extends Partial<component> {
  /**
   * ID is ID.
   */
  id?: string;
  action_items?: ActionItem[];
}

//////////
// source: avatar.go

export const TypeAvatar = "avatar" as const;
export interface Avatar extends Partial<component> {
  /**
   * ID is ID.
   */
  id: string;
  size: string;
  picture: Picture;
}

//////////
// source: badge.go

export const TypeBadge = "badge" as const;
export interface Badge extends Partial<component> {
  /**
   * ID is ID.
   */
  id: string;
  title?: Text;
  icon?: Picture;
  state?: string;
}

//////////
// source: banner.go

export const TypeBanner = "banner" as const;
export interface Banner extends Partial<component> {
  image?: Picture;
  image_compact?: Picture;
  /**
   * ID is ID.
   */
  id: string;
  size: Size;
}

//////////
// source: billing_info_card.go

export const TypeBillingInfoCard = "billing-info-card" as const;
export interface BillingInfoCard extends Partial<component> {
  /**
   * ID is ID.
   */
  id: string;
  type: string;
  total?: Fee;
  fees?: Fee[];
}

//////////
// source: button.go

export const TypeButton = "button" as const;
export const TypeButtonAddMyStuff = "add_my_stuff" as const;
export const TypeButtonTooltip = "button-tooltip" as const;
export const TypeButtonIcon = "button-icon" as const;
export const StyleButtonPrimary = "primary" as const;
export const StyleButtonSecondary = "secondary" as const;
export const StyleButtonTertiary = "tertiary" as const;
export const StyleButtonIconOnly = "icon-only" as const;
export const StyleButtonBranded = "branded" as const;
export const StyleButtonInline = "inline" as const;
export interface Button extends Partial<component> {
  /**
   * ID is ID.
   */
  id?: string;
  text?: Text;
  tooltip_text?: Text;
  icon?: Picture;
  icon_focused?: Picture;
  leading_icon?: Picture;
  leading_icon_focused?: Picture;
  trailing_icon?: Picture;
  trailing_icon_focused?: Picture;
  style?: string;
}

//////////
// source: button_group.go

export const TypeButtonGroup = "button-group" as const;
export interface ButtonGroup extends Partial<component> {
  /**
   * ID is ID.
   */
  id?: string;
  buttons?: Button[];
}

//////////
// source: bww.go

export const TypeBWW = "bww" as const;
export interface BWW extends Partial<component> {
  /**
   * ID is ID.
   */
  id?: string;
  title?: Text;
  sections?: Section[];
}

//////////
// source: card.go

export const TypeCardWide = "card-wide" as const;
export const TypeCardPoster = "card-poster" as const;
export const TypeCardPosterThin = "card-poster-thin" as const;
export interface Card extends Partial<component> {
  header?: CardHeader;
  footer?: CardFooter;
  see_more?: CardSeeMore;
  legend?: CardLegend;
  ctas?: CardCTAs;
  rating?: Picture;
  accent_colors?: string[];
  channel_id?: string;
  /**
   * ID is ID.
   */
  id: string;
  state: CardState;
  body: CardBody;
}

//////////
// source: catalog_header.go

export const TypeCatalogHeader = "catalog-header" as const;
export const TypeCatalogHeaderWallpaper = "catalog-header-wallpaper" as const;
export interface CatalogHeader extends Partial<component> {
  title?: Text;
  description?: Text;
  logo?: Picture;
  background_image?: Picture;
  background_logo?: Picture;
  button?: Button;
  is_favorite?: boolean;
}

//////////
// source: channel_cell.go

export const TypeChannelCell = "channel-cell" as const;
export interface ChannelCell extends Partial<component> {
  /**
   * ID is ID.
   */
  id: string;
  channel_tags?: ChannelTag[];
  name?: Text;
  logo_dark: Picture;
  logo_light: Picture;
  is_favorite: boolean;
  is_locked?: boolean;
}

//////////
// source: chip.go

export const TypeChipNavigation = "chip-navigation" as const;
export const TypeChipFilter = "chip-filter" as const;
export const TypeTab = "tab" as const;
export interface Chip extends Partial<component> {
  title?: Text;
  icon?: Picture;
  selected_icon?: Picture;
  /**
   * ID is ID.
   */
  id: string;
  slug?: string;
  public_path: string;
  is_selected: boolean;
  has_separator: boolean;
}

//////////
// source: claim.go

export const TypeClaim = "claim" as const;
export interface Claim extends Partial<component> {
  /**
   * ID is ID.
   */
  id: string;
  title?: Text;
  icon?: Picture;
  state?: string;
}

//////////
// source: component.go

/**
 * Actionable is interface for actions.
 */
export type Actionable = any;
/**
 * Accessible is interface for accessibility.
 */
export type Accessible = any;
/**
 * Container is interface for Components manipulation.
 */
export type Container = any;
/**
 * Typed is interface for Component Type.
 */
export type Typed = any;
/**
 * Metadata is interface for internal metadata that will not be exposed to the public.
 */
export type Metadata = any;

export type Component = 
    Actionable &
    Container &
    Typed &
    Metadata &
    Accessible;
export interface component {
  /**
   * Type is required because Frontends rely on that to detect which Component to render (json key `type`).
   */
  type: string;
  /**
   * Actions is a list of actions associated to a hook (json key `actions`, omitempty)
   */
  actions?: { [key: any /* action.Hook */]: any /* action.Action */[]};
  /**
   * Accessibility
   */
  accessibility?: { [key: string]: string};
  /**
   * Components is list of components (json key `components`, omitempty).
   */
  components?: Component[];
}

//////////
// source: context_menu.go

export const TypeContextMenu = "context-menu" as const;
export const TypeContextMenuList = "context-menu-list" as const;
export const TypeContextMenuMetadata = "context-menu-metadata" as const;
export interface ContextMenu extends Partial<component> {
  hat_title?: Text;
  title?: Text;
  subtitle?: Text;
  description?: Text;
  station_logo?: Picture;
  /**
   * ID is ID.
   */
  id: string;
  tags?: Tag[];
  icons?: Picture[];
}

//////////
// source: context_menu_billing_info.go

export const TypeContextMenuBillingInfo = "context-menu-billing-info" as const;
export interface ContextMenuBillingInfo extends Partial<component> {
  subtitle?: Text;
  disclaimer?: Text;
  info: BillingInfoCard;
  /**
   * ID is ID.
   */
  id: string;
  template?: any /* action.Template */;
  components?: Button[];
  title: Text;
}

//////////
// source: context_menu_instructions.go

export const TypeContextMenuInstructions = "context-menu-instructions" as const;
export interface ContextMenuInstructions extends Partial<component> {
  title?: Text;
  subtitle?: Text;
  qr_code_url?: string;
  top_price?: Text;
  bottom_price?: Text;
  /**
   * ID is ID.
   */
  id: string;
  template?: any /* action.Template */;
  instructions?: InstructionItem[];
}

//////////
// source: context_menu_locked.go

export const TypeContextMenuLocked = "context-menu-locked" as const;
export interface ContextMenuLocked extends Partial<component> {
  hat_title?: Text;
  title?: Text;
  subtitle?: Text;
  description?: Text;
  station_logo?: Picture;
  locked_offer_info?: LockedOfferInfo;
  offer_item?: OfferItem;
  /**
   * ID is ID.
   */
  id: string;
  tags?: Tag[];
  icons?: Picture[];
}

//////////
// source: context_menu_panel.go

export const TypeContextMenuPanel = "context-menu-panel" as const;
export interface ContextMenuPanel extends Partial<component> {
  title?: Text;
  /**
   * ID is ID.
   */
  id: string;
}

//////////
// source: data_struct_button_data.go

export interface ButtonData {
  Text?: Text;
  Icon?: Picture;
  /**
   * ID is ID.
   */
  ID?: string;
  IsSelected?: boolean;
  IsFocused?: boolean;
  Actions: any /* action.Action */[];
}

//////////
// source: data_struct_card_body.go

export interface CardBody {
  actions?: { [key: any /* action.Hook */]: any /* action.Action */[]};
  progress_bar?: ProgressBar;
  station_logo?: Picture;
  title?: Text;
  subtitle?: Text;
  time_label?: Text;
  overlay?: Text;
  tags?: Tag[];
  picture: Picture;
}

//////////
// source: data_struct_card_ctas.go

export interface CardCTAs {
  add_my_stuff?: Button;
  record?: Button;
  more?: Button;
}

//////////
// source: data_struct_card_footer.go

export interface CardFooter {
  actions?: { [key: any /* action.Hook */]: any /* action.Action */[]};
  title?: Text;
  subtitle?: Text;
  time_label?: Text;
}

//////////
// source: data_struct_card_header.go

export interface CardHeader {
  station_logo?: Picture;
}

//////////
// source: data_struct_card_legend.go

export interface CardLegend {
  recommendation?: Text;
}

//////////
// source: data_struct_card_see_more.go

export interface CardSeeMore {
  title?: Text;
}

//////////
// source: data_struct_card_state.go

export interface CardState {
  timeleft?: Text;
  is_currently_watching?: boolean;
  is_favorite: boolean;
  is_recorded: boolean;
  is_locked: boolean;
  is_folder: boolean;
}

//////////
// source: data_struct_channel_tag.go

export interface ChannelTag {
  /**
   * ID is ID.
   */
  id: string;
  label?: string;
  value?: string;
}

//////////
// source: data_struct_fee.go

export interface Fee {
  description?: Text;
  name: Text;
  price: Text;
}

//////////
// source: data_struct_hero_background.go

export interface HeroBackground {
  /**
   * Video SOON
   */
  picture?: Picture;
}

//////////
// source: data_struct_hero_data.go

export interface HeroData {
  /**
   * ID is ID.
   */
  id: string;
  background?: HeroBackground;
  tags?: Tag[];
  hat_title?: Text;
  title?: Text;
  subtitle?: Text;
  description?: Text;
  buttons?: Button[];
}

//////////
// source: data_struct_home_network.go

export interface HomeNetwork {
  title?: Text;
  subtitle?: Text;
  buttons?: Button[];
}

//////////
// source: data_struct_input_choice.go

export interface InputChoice {
  label?: string;
  value?: string;
}

//////////
// source: data_struct_input_validation.go

export interface InputValidation {
  regex?: string;
  regex_desc?: string;
}

//////////
// source: data_struct_landing_background.go

export interface LandingBackground {
  picture?: Picture;
}

//////////
// source: data_struct_landing_background_images.go

export interface LandingBackgroundImages {
  other?: Picture;
  phone_portrait?: Picture;
  phone_landscape?: Picture;
  tablet_portrait?: Picture;
  tablet_landscape?: Picture;
}

//////////
// source: data_struct_list_item_ctas.go

export interface ListItemCTAs {
  record?: Button;
  more?: Button;
}

//////////
// source: data_struct_list_item_state.go

export interface ListItemState {
  is_recording_series: boolean;
  is_folder: boolean;
}

//////////
// source: data_struct_program_cell_ctas.go

export interface ProgramCellCTAs {
  record?: Button;
}

//////////
// source: data_struct_promotion.go

export interface Promotion {
  image?: Picture;
  image_compact?: Picture;
  size: Size;
  y_offset?: number /* float64 */;
  y_offset_compact?: number /* float64 */;
}

//////////
// source: data_struct_section_context.go

export interface SectionContext {
  has_title: boolean;
  has_subtitle: boolean;
  has_footer: boolean;
  has_header: boolean;
  has_see_more: boolean;
  has_recommendation: boolean;
}

//////////
// source: data_struct_up_next.go

export interface UpNext {
  endpoint?: any /* action.Endpoint */;
  next_polling: string;
}

//////////
// source: data_struct_user_info.go

export interface UserInfo {
  title?: Text;
  value?: Text;
}

//////////
// source: data_struct_when_paused.go

export interface WhenPaused {
  actions?: any /* action.Action */[];
  delay_ms: number /* int */;
}

//////////
// source: dialog.go

export const TypeDialog = "dialog" as const;
export const TypeTransactionalDialog = "transactional-dialog" as const;
export interface Dialog extends Partial<component> {
  subtitle?: Text;
  icon?: Picture;
  buttons?: Button[];
  title: Text;
}

//////////
// source: disclaimer.go

export const TypeDisclaimer = "disclaimer" as const;
export interface Disclaimer extends Partial<component> {
  /**
   * Description is description to display.
   */
  description?: Text;
  /**
   * ID is ID
   */
  id: string;
}

//////////
// source: epg.go

export const TypeEPG = "epg" as const;
export interface EPG extends Partial<component> {
  endpoint?: endpointEPG;
}

//////////
// source: external_link.go

export const TypeExternalLink = "external_link" as const;
export interface ExternalLink extends component {
  text: string;
  formatted?: string;
}

//////////
// source: fallback.go

export const TypeFallback = "fallback" as const;
export interface Fallback extends Partial<component> {
  title?: Text;
  description?: Text;
  icon?: Picture;
  group_id?: string;
  /**
   * ID is ID.
   */
  id: string;
  buttons?: Button[];
  display_brand_logo?: boolean;
}

//////////
// source: hero.go

export const TypeHero = "hero" as const;
export interface Hero extends Partial<component> {
  source?: any;
  component_type: string;
  slug: string;
  hero_items: HeroData[];
  size: Size;
  context: SectionContext;
}

//////////
// source: hero_store.go

export const TypeHeroStore = "hero_store" as const;
export interface HeroStore extends Partial<component> {
  title?: Text;
  icon?: Picture;
  background?: HeroBackground;
  price?: Text;
  /**
   * ID is ID.
   */
  id: string;
  buttons?: Button[];
  tags?: Tag[];
}

//////////
// source: input.go

export const InputTypeTextfield = "textfield" as const;
export const InputTypeSecretTextfield = "secret_textfield" as const;
export const InputTypeRadio = "radio" as const;
export const InputTypeDatePicker = "datepicker" as const;
export const InputKeyboardTypeEmail = "email" as const;
export const InputKeyboardTypeNumpad = "numpad" as const;
export const InputKeyboardTypeDefault = "default" as const;
export const InputRegexEmail = "^[\\w.%+-]+@([\\w-]+\\.)+[\\w-]{2,63}$" as const;
export const InputRegexPassword = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!\"#\\$%&'()*+,-.\\/:;<=>?@\\[\\]^_`{|}~])[A-Za-z\\d!\"#\\$%&'()*+,-.\\/:;<=>?@\\[\\]^_`{|}~]{8,}$" as const;
export const InputRegexZipcode = "^[0-9]{5}(?:-[0-9]{4})?$" as const;
export const InputNameEmail = "email" as const;
export const InputNamePassword = "password" as const;
export const InputNameDateOfBirth = "dob" as const;
export const InputNameGender = "gender" as const;
export interface Input {
  name?: string;
  label?: string;
  placeholder?: string;
  /**
   * InputValidation can do slice of validations, actually available for Roku
   */
  validations?: InputValidation[];
  regex?: string;
  regex_desc?: string;
  format?: string;
  type?: string;
  keyboard?: string;
  accessibility?: { [key: string]: string};
  choices?: InputChoice[];
}

//////////
// source: instruction_item.go

export const TypeInstructionItem = "instruction-item" as const;
export interface InstructionItem extends Partial<component> {
  label: Text;
  value: Text;
}

//////////
// source: landing.go

export const TypeLandingAuth = "auth-landing" as const;
export const TypeLandingWelcome = "welcome-landing" as const;
export interface Landing extends Partial<component> {
  title?: Text;
  subtitle?: Text;
  description?: Text;
  link_description?: Text;
  link?: Text;
  icon?: Picture;
  background?: LandingBackground;
  background_images?: LandingBackgroundImages;
  legals?: Text;
  /**
   * ID is ID.
   */
  id: string;
  buttons?: Button[];
  background_gradient: boolean;
}

//////////
// source: legal_item.go

export const TypeLegalItem = "legal-item" as const;
export interface LegalItem extends Partial<component> {
  title?: Text;
  value?: Text;
}

//////////
// source: legals.go

export const TypeLegals = "legals" as const;
export interface Legals extends Partial<component> {
  terms_of_services?: LegalItem;
  privacy_policy?: LegalItem;
  cookie_policy?: LegalItem;
  footer?: Text;
}

//////////
// source: list_details.go

export const TypeListDetails = "list-details" as const;
export interface ListDetails extends Partial<component> {
  title?: Text;
  subtitle?: Text;
  description?: Text;
  artwork?: Picture;
  selector?: SelectorBasic;
  filters?: SectionFilter;
  ctas?: Component[];
}

//////////
// source: list_header.go

export const TypeListHeader = "list-header" as const;
export interface ListHeader extends Partial<component> {
  description?: Text;
  ctas?: Component[];
  title: Text;
}

//////////
// source: list_item.go

export const TypeListItemWide = "list-item-wide" as const;
export const TypeListItemPoster = "list-item-poster" as const;
export const TypeListItemSuggestion = "list-item-suggestion" as const;
export interface ListItem extends Partial<component> {
  state?: ListItemState;
  channel_picture?: Picture;
  progress_bar?: ProgressBar;
  subtitle?: Text;
  description?: Text;
  info?: Text;
  ctas?: ListItemCTAs;
  time_label?: Text;
  rating?: Picture;
  /**
   * ID is ID.
   */
  id: string;
  tags?: Tag[];
  title: Text;
  picture: Picture;
}

//////////
// source: locked_offer_info.go

export const TypeLockedOfferInfo = "locked-offer-info" as const;
export interface LockedOfferInfo extends Partial<component> {
  icon?: Picture;
  title?: Text;
}

//////////
// source: menu.go

export const TypeMenu = "menu" as const;
export interface Menu extends Partial<component> {
  /**
   * ID is ID.
   */
  id?: string;
  menu_items?: MenuItem[];
}

//////////
// source: menu_item.go

export const TypeMenuItem = "menu-item" as const;
export interface MenuItem extends Partial<component> {
  text?: Text;
  icon?: Picture;
  icon_focused?: Picture;
  /**
   * ID is ID.
   */
  id?: string;
  slug?: string;
  is_selected: boolean;
  show_divider: boolean;
}

//////////
// source: multiview.go

export const TypeMultiview = "multiview" as const;
export interface Multiview extends component {
  players: Player[];
}

//////////
// source: my_stuff_dvr_space.go

export const TypeMyStuffDVRSpace = "my-stuff-dvr-space" as const;
export interface MyStuffDVRSpace extends Partial<component> {
  warning?: Text;
  buttons?: Button[];
  progress_bar: ProgressBar;
  title: Text;
  subtitle: Text;
  description: Text;
}

//////////
// source: my_stuff_filters.go

export const TypeMyStuffFilters = "my-stuff-filters" as const;
export interface MyStuffFilters extends Partial<component> {
  status_filters: NavigationEntry;
  content_type_filters: NavigationEntry;
}

//////////
// source: navigation_entry.go

export const TypeNavigationEntry = "navigation-entry" as const;
export const TypeNavigationTabbar = "navigation-tabbar" as const;
export const TypeNavigationSystem = "navigation-system" as const;
export const TypeNavigationSubTab = "navigation-sub-tab" as const;
export interface NavigationEntry extends component {
  title?: Text;
  icon?: Picture;
  focus_icon?: Picture;
  selected_icon?: Picture;
  /**
   * ID is ID.
   */
  id?: string;
  slug?: string;
  public_path?: string;
  items?: NavigationEntry[];
  is_landing: boolean;
}

//////////
// source: network_details.go

export const TypeNetworkDetails = "network-details" as const;
export interface NetworkDetails extends Partial<component> {
  title?: Text;
  description?: Text;
  logo?: Picture;
  /**
   * ID is ID.
   */
  id: string;
}

//////////
// source: notice.go

export const TypeNotice = "notice" as const;
export interface Notice extends component {
  description?: Text;
  /**
   * ID is ID.
   */
  id?: string;
}

//////////
// source: offer_details_metadata.go

export const TypeOfferDetailsMetadata = "offer-details-metadata" as const;
export interface OfferDetailsMetadata extends Partial<component> {
  /**
   * ID is ID.
   */
  id?: string;
  slug?: string;
  top_badge?: Badge;
  title?: Text;
  top_price?: Text;
  bottom_price?: Text;
  logo?: Picture;
  claims?: Claim[];
  ctas?: Component[];
  links?: ExternalLink[];
}

//////////
// source: offer_item.go

export const TypeOfferItem = "offer-item" as const;
export interface OfferItem extends Partial<component> {
  /**
   * ID is ID.
   */
  id?: string;
  slug?: string;
  logo?: Picture;
  top_price?: Text;
  bottom_price?: Text;
  buttons?: Button[];
}

//////////
// source: overlay.go

export const TypeOverlay = "overlay" as const;
export interface Overlay extends component {
  image?: Picture;
  dismissible: boolean;
}

//////////
// source: picture.go

export const TypePicture = "picture" as const;
export interface Picture extends component {
  /**
   * URL is the image's url (ex: https://example.com/picture.png).
   */
  url: string;
}

//////////
// source: plan_choice_card.go

export const TypePlanChoiceCard = "plan-choice-card" as const;
export interface PlanChoiceCard extends Partial<component> {
  /**
   * ID is ID.
   */
  id: string;
  size: string;
  title?: Text;
  subtitle?: Text;
  claims: Text[];
  buttons?: Button[];
}

//////////
// source: plan_choice_periodic_card.go

export const TypePlanChoicePeriodicCard = "plan-choice-periodic-card" as const;
export interface PlanChoicePeriodicCard extends Partial<component> {
  id: string;
  size: string;
  title?: Text;
  subtitle?: Text;
  disclaimer?: Text;
  claims?: Text[];
  tags?: Tag[];
  buttons?: Button[];
  channels?: Picture[];
}

//////////
// source: player.go

export const TypePlayer = "player" as const;
export interface Player extends Partial<component> {
  up_next?: UpNext;
  station_logo?: Picture;
  title?: Text;
  subtitle?: Text;
  description?: Text;
  poster?: Picture;
  errors: { [key: string]: any};
  toasts: { [key: string]: any};
  drawer?: PlayerDrawer;
  bww?: PlayerDrawerPanel;
  metadata?: PlayerMetadata;
  when_paused?: WhenPaused;
  player_placeholder?: PlayerPlaceholder;
  tags?: Tag[];
  is_upcoming?: boolean;
}

//////////
// source: player_drawer.go

export const TypePlayerDrawer = "player-drawer" as const;
export interface PlayerDrawer extends Partial<component> {
  panel_bww?: PlayerDrawerPanel;
  panel_info?: PlayerDrawerPanel;
  panel_subtitles?: PlayerDrawerPanel;
  panel_settings?: PlayerDrawerPanel;
  /**
   * ID is ID.
   */
  id?: string;
  slug?: string;
  filters?: Chip[];
}

//////////
// source: player_drawer_panel.go

export const TypePlayerDrawerPanel = "player-drawer-panel" as const;
export interface PlayerDrawerPanel extends Partial<component> {
  endpoint?: any /* action.Endpoint */;
  /**
   * ID is ID.
   */
  id?: string;
  slug?: string;
  panel_type: string;
}
export const TypeDrawerPanelBWW = "drawer-bww" as const;
export const TypeDrawerPanelInfo = "drawer-info" as const;
export const TypeDrawerPanelSettings = "drawer-settings" as const;
export const TypeDrawerPanelSubtitles = "drawer-subtitles" as const;

//////////
// source: player_metadata.go

export const TypePlayerMetadata = "player-metadata" as const;
export interface PlayerMetadata extends Partial<component> {
  is_favorite_channel?: boolean;
  station_logo?: Picture;
  tags?: Tag[];
  hat_title?: Text;
  title?: Text;
  subtitle?: Text;
  description?: Text;
  ctas?: Component[];
}

//////////
// source: player_placeholder.go

export const TypePlayerPlaceholder = "player-placeholder" as const;
export interface PlayerPlaceholder extends Partial<component> {
  icon?: Picture;
  title?: Text;
  subtitle?: Text;
}

//////////
// source: player_settings.go

export const TypePlayerSettings = "player-settings" as const;
export interface PlayerSettings extends Partial<component> {
  title?: Text;
  /**
   * ID is ID.
   */
  id?: string;
  slug?: string;
}

//////////
// source: program_cell.go

export const TypeProgramCell = "program-cell" as const;
export interface ProgramCell extends Partial<component> {
  start_time: any /* time.Time */;
  end_time: any /* time.Time */;
  subtitle?: Text;
  ctas?: ProgramCellCTAs;
  /**
   * ID is ID.
   */
  id: string;
  tags?: Tag[];
  title?: Text;
  picture: Picture;
  is_locked?: boolean;
  is_recording?: boolean;
}

//////////
// source: program_details_metadata.go

export const TypeProgramDetailsMetadata = "program-details-metadata" as const;
export interface ProgramDetailsMetadata extends Partial<component> {
  /**
   * ID is ID.
   */
  id?: string;
  slug?: string;
  station_logo?: Picture;
  tags?: Tag[];
  hat_title?: Text;
  title?: Text;
  subtitle?: Text;
  description?: Text;
  artwork?: Picture;
  ctas?: Component[];
  icons?: Picture[];
}

//////////
// source: progress_bar.go

export const TypeProgressBar = "progress_bar" as const;
export const KindProgressBarLive = "live" as const;
export const KindProgressBarVOD = "vod" as const;
export const KindProgressBarDVRSpace = "dvr_space" as const;
export interface ProgressBar extends component {
  percentage?: number /* int */;
  kind: string;
  start_time?: string;
  end_time?: string;
}

//////////
// source: promotional_dialog.go

export const TypePromotionalDialog = "promotional_dialog" as const;
export const StyleAlignCenter = "align-center" as const;
export const StyleAlignLeft = "align-left" as const;
export const StyleAlignRight = "align-right" as const;
export interface PromotionalDialog extends Partial<component> {
  cta_information?: Text;
  promotional_offer?: Text;
  title?: Text;
  subtitle?: Text;
  icon?: Picture;
  logo?: Picture;
  background_image?: LandingBackground;
  background_images?: LandingBackgroundImages;
  body?: Text;
  background_color?: string;
  alignment: string;
  buttons?: Button[];
  links?: ExternalLink[];
  claims?: Claim[];
  dismissible?: boolean;
}

//////////
// source: reorder_channel_list_item.go

export const TypeReorderChannelListItem = "reorder-channel-list-item" as const;
export interface ReorderChannelListItem extends Partial<component> {
  name?: Text;
  logo_dark?: Picture;
  logo_light?: Picture;
  /**
   * ID is ID.
   */
  id: string;
}

//////////
// source: search_bar.go

export const TypeSearchBar = "search-bar" as const;
export interface SearchBar extends component {
  search_text: string;
  placeholder: string;
}

//////////
// source: section.go

export const TypeCarousel = "carousel" as const;
export const TypeGrid = "grid" as const;
export const TypeVerticalList = "vertical-list" as const;
export const S = 0 + 1 as const;
export const M = 1 + 1 as const;
export const L = 2 + 1 as const;
export const XL = 3 + 1 as const;
export const XXS = 4 + 1 as const;
export const XS = 5 + 1 as const;
export type Size = number /* int */;
export type GenericSection = 
    Component;
export interface Section extends Partial<component> {
  title?: Text;
  subtitle?: Text;
  context?: SectionContext;
  promotion?: Promotion;
  aux_button?: Button;
  source?: any;
  component_type: string;
  slug: string;
  group_id?: string;
  initial_component_id?: string;
  size: Size;
}

//////////
// source: section_filter.go

export const TypeSectionFilter = "section-filter" as const;
export interface SectionFilter extends Partial<component> {
  title?: Text;
  filters?: Text[];
}

//////////
// source: select_item.go

export const TypeSelectItem = "select-item" as const;
export interface SelectItem extends Partial<component> {
  text?: Text;
  /**
   * ID is ID.
   */
  id?: string;
  slug?: string;
  is_disabled: boolean;
  is_selected: boolean;
}

//////////
// source: select_item_group.go

export const TypeSelectItemGroup = "select-item-group" as const;
export interface SelectItemGroup extends Partial<component> {
  /**
   * ID is ID.
   */
  id?: string;
  title?: Text;
  select_items?: SelectItem[];
  is_vertical: boolean;
}

//////////
// source: selector_basic.go

export const TypeSelectorBasic = "selector-basic" as const;
export interface SelectorBasic extends Partial<component> {
  title?: Text;
  button?: Button;
  alternative_title?: Text;
  section_anchors?: SelectItemGroup;
}

//////////
// source: store_addon.go

export const TypeStoreAddon = "store-addon" as const;
export interface StoreAddon extends Partial<component> {
  title?: Text;
  subtitle?: Text;
  background_image?: Picture;
  price?: Text;
  /**
   * ID is ID.
   */
  id: string;
  tags?: Tag[];
  buttons?: Button[];
  is_recommended: boolean;
  is_subscribed: boolean;
}

//////////
// source: store_plan.go

export const TypeStorePlan = "store-plan" as const;
export interface StorePlan extends Partial<component> {
  title?: Text;
  background_image?: Picture;
  logo?: Picture;
  price?: Text;
  /**
   * ID is ID.
   */
  id: string;
  tags?: Tag[];
  claims: Claim[];
  buttons?: Button[];
  is_recommended: boolean;
  is_subscribed: boolean;
}

//////////
// source: subscription.go

export const TypeSubscription = "subscription" as const;
export interface Subscription extends Partial<component> {
  title?: Text;
  description?: Text;
  trial_expires_at?: Text;
  price?: Text;
  subscription_status?: Tag;
  /**
   * ID is ID.
   */
  id: string;
  product_type?: string;
  claims?: Claim[];
}

//////////
// source: subscriptions_list.go

export const TypeSubscriptionsList = "subscriptions-list" as const;
export interface SubscriptionsList extends Partial<component> {
  title?: Text;
  subtitle?: Text;
  footer?: Text;
  /**
   * ID is ID.
   */
  id: string;
  subscriptions?: Subscription[];
}

//////////
// source: tag.go

export const TypeTag = "tag" as const;
export type CustomTag = string;
export const CustomLiveTag = "tag-live" as const;
export const CustomNewTag = "tag-new" as const;
export const CustomUpcomingTag = "tag-upcoming" as const;
export const CustomRecordingTag = "tag-recording" as const;
export const CustomScheduledTag = "tag-scheduled" as const;
export const CustomStoreTag = "tag-store" as const;
export const CustomNewlyRecordedTag = "tag-newly-recorded" as const;
export type StyleTag = string;
export const enum StyleTag=  {
"primary",
export const enum StyleTag=  {
"secondary",
export const enum StyleTag=  {
"tertiary",
export const enum StyleTag=  {
"quaternary",
export const enum StyleTag=  {
"quinary",
export const enum StyleTag=  {
"custom",
export interface Tag extends component {
  label?: string;
  style?: StyleTag;
}

//////////
// source: text.go

export const TypeText = "text" as const;
export interface Text extends component {
  /**
   * Text is text to display.
   */
  text: string;
  /**
   * Formatted is text to display with format elements using HTML.
   */
  formatted?: string;
  /**
   * Size is size of text to display
   */
  size?: string;
}

//////////
// source: tile.go

export const TypeCircle = "circle" as const;
export const TypeSquare = "square" as const;
export interface Tile extends Partial<component> {
  title?: Text;
  subtitle?: Text;
  /**
   * ID is ID.
   */
  id: string;
  picture: Picture;
  is_favorite: boolean;
  is_locked?: boolean;
}

//////////
// source: toast.go

export const TypeToast = "toast" as const;
export const StyleToastInfo = "info" as const;
export const StyleToastSuccess = "success" as const;
export const StyleToastWarn = "warn" as const;
export interface Toast extends component {
  /**
   * Style is level.
   * It can have 3 values: info, success or warn
   */
  style: string;
  /**
   * Text is text to display.
   */
  text: Text;
  /**
   * Icon is image to display.
   */
  icon?: Picture;
}
